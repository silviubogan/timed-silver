<UserControl x:Class="cs_timed_silver.ClockUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:cs_timed_silver"
             xmlns:wpf="clr-namespace:wpf_timespanpicker;assembly=wpf-timespanpicker"
             xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
             mc:Ignorable="d" 
             Name="MyClockUC"
             d:DesignHeight="200" d:DesignWidth="400"
             RenderTransformOrigin="0.5 0.5">
    <UserControl.Resources>
        <SolidColorBrush x:Key="DarkThemeNormalBackBrush" Color="#ff555555"/>
        <SolidColorBrush x:Key="LightThemeNormalBackBrush" Color="White"/>
        <SolidColorBrush x:Key="DarkThemeActiveBackBrush" Color="DarkGreen"/>
        <SolidColorBrush x:Key="LightThemeActiveBackBrush" Color="Yellow"/>

        <SolidColorBrush x:Key="FocusedBorderBrush" Color="Yellow"/>
        <SolidColorBrush x:Key="CheckedBorderBrush" Color="Purple"/>
        <SolidColorBrush x:Key="DarkThemeBorderBrush" Color="White"/>
        <SolidColorBrush x:Key="LightThemeBorderBrush" Color="DarkGray"/>

        <local:BoolToInvisibilityConverter x:Key="BoolToVis"/>
        <BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
        <!--<local:ClockToButtonIconPathConverter x:Key="ClockToBtn"/>-->
        <local:ClockDataToClockTypeConverter x:Key="ClockToType"/>
        <local:UserBackColorToActualBorderColorConverter
            FocusedBrush="{StaticResource FocusedBorderBrush}"
            CheckedBrush="{StaticResource CheckedBorderBrush}"
            DarkThemeBrush="{StaticResource DarkThemeBorderBrush}"
            LightThemeBrush="{StaticResource LightThemeBorderBrush}"
            x:Key="ClockToBorderConv"/>

        <Style x:Key="darkTheme">
            <Setter Property="Control.Foreground" Value="White"/>
            <Setter Property="Grid.Background" Value="#FF555555"/>
        </Style>
        <Style x:Key="lightTheme">
            <Setter Property="Control.Foreground" Value="Black"/>
            <Setter Property="Grid.Background" Value="LightCyan"/>
        </Style>

        <Style x:Key="darkBorderTheme">
        </Style>
        <Style x:Key="lightBorderTheme">
        </Style>

        <Style x:Key="darkTextBoxTheme">
            <Setter Property="TextBox.Background" Value="Black"/>
            <Setter Property="TextBox.Foreground" Value="White"/>
            <Style.Triggers>
                <Trigger Property="TextBox.IsFocused" Value="True">
                    <Setter Property="TextBox.BorderBrush" Value="Blue"/>
                </Trigger>
                <Trigger Property="TextBox.IsFocused" Value="False">
                    <Setter Property="TextBox.BorderBrush" Value="Transparent"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="lightTextBoxTheme">
            <Setter Property="TextBox.Background" Value="White"/>
            <Setter Property="TextBox.Foreground" Value="Black"/>
            <Style.Triggers>
                <Trigger Property="TextBox.IsFocused" Value="True">
                    <Setter Property="TextBox.BorderBrush" Value="Blue"/>
                </Trigger>
                <Trigger Property="TextBox.IsFocused" Value="False">
                    <Setter Property="TextBox.BorderBrush" Value="Transparent"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <UserControl.Visibility>
        <Binding Path="FilteredOut" Converter="{StaticResource BoolToVis}">
        </Binding>
    </UserControl.Visibility>
    <UserControl.CommandBindings>
    </UserControl.CommandBindings>
    <UserControl.LayoutTransform>
        <ScaleTransform ScaleX="1" ScaleY="1" x:Name="MyScaleTransform"/>
    </UserControl.LayoutTransform>
    <UserControl.RenderTransform>
        <ScaleTransform ScaleX="0" ScaleY="0" x:Name="MyRenderScaleTransform"/>
    </UserControl.RenderTransform>
    <UserControl.Effect>
        <DropShadowEffect Color="Black" BlurRadius="10"
                          ShadowDepth="0" Opacity="0.75"
                          ></DropShadowEffect>
    </UserControl.Effect>

    <UserControl.Triggers>
        <EventTrigger RoutedEvent="Loaded">
            <EventTrigger.Actions>
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX"
                            From="0" To="1" Duration="0:0:0.75">
                            <DoubleAnimation.EasingFunction>
                                <ExponentialEase/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY"
                            From="0" To="1" Duration="0:0:0.75">
                            <DoubleAnimation.EasingFunction>
                                <ExponentialEase/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger.Actions>
        </EventTrigger>
    </UserControl.Triggers>
    
    <Border Margin="7,7,7,7" Padding="3,3,3,3" CornerRadius="10"
            Width="324" Height="103.5"
            Name="MyBorder"
            HorizontalAlignment="Center" VerticalAlignment="Center"
            Focusable="True">
        <Border.Background>
            <MultiBinding Converter="{StaticResource ClockToBorderConv}">
                <Binding Path="Checked" Mode="OneWay"/>
                <Binding Path="DarkTheme" RelativeSource="{RelativeSource
                        Mode=FindAncestor, AncestorType=local:ClockUserControl}"
                            Mode="OneWay"/>
                <Binding Path="IsKeyboardFocusWithin" Mode="OneWay"
                        RelativeSource="{RelativeSource
                            Mode=FindAncestor,
                            AncestorType=local:ClockUserControl}"/>
            </MultiBinding>
        </Border.Background>
        <Grid Name="MyRootGrid">
            <Grid.Clip>
                <RectangleGeometry RadiusX="10" RadiusY="10" x:Name="MyRectangleGeometry">
                    <RectangleGeometry.Rect>
                        <Rect X="0" Y="0" Width="318" Height="97.5" />
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
            </Grid.Clip>

            <Grid.RowDefinitions>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Grid HorizontalAlignment="Center" VerticalAlignment="Center"
                    ClipToBounds="True" Name="MySecondGrid"
                    Width="{Binding ElementName=MyRootGrid, Path=ActualWidth}"
                    Height="{Binding ElementName=MyRootGrid, Path=ActualHeight}">
                <Grid.Background>
                    <MultiBinding Converter="{StaticResource UserToActualColor}">
                        <Binding Path="UserBackColor" Mode="OneWay">
                        </Binding>
                        <Binding Path="IsActive" Mode="OneWay">
                        </Binding>
                        <Binding Path="DarkTheme" RelativeSource="{RelativeSource
                                Mode=FindAncestor, AncestorType=local:ClockUserControl}"
                                 Mode="OneWay"/>
                    </MultiBinding>
                </Grid.Background>

                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="3*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" Grid.RowSpan="2"
                           Fill="Yellow" Width="5"
                           Visibility="{Binding Path=IsUnsaved,
                            Converter={StaticResource BoolToVisibility}}"></Rectangle>
                <Grid Grid.Column="1" Grid.RowSpan="2" Name="MyThirdGrid">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="0"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <Image Grid.Row="0" Name="MyImage"
                           Source="{Binding Path=IconSource,
                        Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                           ToolTipService.InitialShowDelay="0"
                           ToolTipService.ShowDuration="2147483647">
                        <Image.ToolTip>
                            <Image Source="{Binding Path=IconSource,
                        Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </Image.ToolTip>
                    </Image>
                    <Viewbox Grid.Row="1" HorizontalAlignment="Stretch"
                             VerticalAlignment="Stretch">
                        <TextBlock Foreground="#FF2196f3"
                           Padding="5,5,5,5" Name="MyIDTextBlock"
                                   Text="{Binding Path=ID, Mode=OneWay,
                            UpdateSourceTrigger=PropertyChanged}"/>
                    </Viewbox>
                </Grid>

                <local:ClockValueScreen Grid.Row="1" Grid.Column="2"
                                        x:Name="MyClockValueScreen"/>

                <TextBox Grid.Column="2" Margin="0,7,7,0"
                         AcceptsReturn="True" Name="MyTextBox"
                         AllowDrop="True"
                         PreviewDragOver="MyTextBox_PreviewDragOver"
                         DragOver="MyTextBox_DragOver"
                         PreviewDragEnter="MyTextBox_PreviewDragEnter"
                         DragEnter="MyTextBox_DragEnter"
                         TextWrapping="Wrap"
                         Text="{Binding ElementName=MyClockUC, UpdateSourceTrigger=PropertyChanged,
                    Path=ClockTag, Mode=TwoWay}">
                    <local:WatermarkService.Watermark>
                        <TextBlock Foreground="Gray" FontStyle="Italic">Type here...</TextBlock>
                    </local:WatermarkService.Watermark>
                </TextBox>

                <Button Grid.Column="3" Grid.Row="1"
                        Margin="0,0,0,0"
                        Command="{Binding MyToggleCommand}" ToolTip="De/activate this clock">
                    <Image Name="MyToggleButtonImage">
                        <Image.Source>
                            <MultiBinding Converter="{StaticResource ClockToBtn}">
                                <Binding Path="ClockType"
                                         Mode="OneWay"/>
                                <Binding Path="IsActive"
                                         Mode="OneWay"/>
                            </MultiBinding>
                        </Image.Source>
                    </Image>
                </Button>

                <Button Grid.Column="3" Margin="0,0,0,0"
                        Command="{Binding MyDeleteCommand}" ToolTip="Delete this clock">
                    <Image Source="/Resources/Oxygen-Icons.org-Oxygen-Actions-edit-delete.ico"></Image>
                </Button>

                <local:DragCheckHandleUserControl Grid.Column="4" Grid.Row="0">
                </local:DragCheckHandleUserControl>

                <Button Grid.Column="4" Grid.Row="1" FontSize="5"
                        Style="{DynamicResource ButtonStyle1}"
                        Click="Button_Click">
                    <Button.Resources>
                        <!-- export these resources in a resource dictionary in separate file ~ButtonWithPath -->
                        <Style x:Key="FocusVisual">
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
                        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
                        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
                        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
                        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
                        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
                        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
                        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
                        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
                        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Setter Property="Padding" Value="1"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid ClipToBounds="True">
                                            <Border x:Name="border"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    Background="{TemplateBinding Background}"
                                                    SnapsToDevicePixels="true">
                                                <ContentPresenter x:Name="contentPresenter"
                                                                  Focusable="False"
                                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                  Margin="{TemplateBinding Padding}"
                                                                  RecognizesAccessKey="True"
                                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </Border>
                                            <Ellipse Fill="Transparent"
                                                  Stroke="{TemplateBinding BorderBrush}"
                                                  StrokeThickness="{TemplateBinding BorderThickness}"
                                                  Visibility="{Binding RoundedCorners,
                                                Converter={StaticResource BoolToVisibility},
                                                RelativeSource={RelativeSource Mode=FindAncestor,
                                                    AncestorType=local:ClockUserControl}}" Margin="-20,-20,-8.0,-8.5"
                                                     ></Ellipse>
                                            <!--<Path Stretch="Uniform" Data="M 20,20 A 10,10 0 0 1 10,20"
                                                  Stroke="{TemplateBinding BorderBrush}"
                                                  StrokeThickness="{TemplateBinding BorderThickness}"
                                                  Visibility="{Binding RoundedCorners,
                                                Converter={StaticResource BoolToVisibility},
                                                RelativeSource={RelativeSource Mode=FindAncestor,
                                                    AncestorType=local:ClockUserControl}}" Margin="0,0,-6.75,-8.167"/>-->
                                            <!-- TODO: perfect Bezier! old: M 75,0 C 75,90 90,75 0,75 -->
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsDefaulted" Value="true">
                                                <Setter Property="BorderBrush" TargetName="border"
                                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Setter Property="Background" TargetName="border"
                                                        Value="{StaticResource Button.MouseOver.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="true">
                                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Button.Resources>
                    <Viewbox>
                        <TextBlock>
                            Menu
                        </TextBlock>
                    </Viewbox>
                </Button>
            </Grid>
        </Grid>
    </Border>
</UserControl>
